[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\AW\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\AW\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.6 (BellSoft Java 1.8.0_432)
[debug] Load.defaultLoad until apply took 86.8886ms
[debug]           Load.loadUnit: plugins took 134.0197ms
[debug]           Load.loadUnit: defsScala took 0.2767ms
[debug] [Loading] Scanning directory C:\nsw-project\ETL-License\project
[debug]             Load.loadUnit: mkEval took 10.302ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\nsw-project\ETL-License\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.4297 ms
[info] loading settings for project etl-license-build from idea.sbt...
[debug]               Load.resolveProject(etl-license-build) took 39.3632ms
[debug]             Load.loadTransitive: finalizeProject(Project(id etl-license-build, base: C:\nsw-project\ETL-License\project, plugins: List(<none>))) took 59.1616ms
[debug] [Loading] Done in C:\nsw-project\ETL-License\project, returning: (etl-license-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2240.7803ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.6468ms
[debug]         Load.loadUnit(file:/C:/nsw-project/ETL-License/project/, ...) took 2386.095ms
[debug]       Load.apply: load took 2507.8128ms
[debug]       Load.apply: resolveProjects took 3.489ms
[debug]       Load.apply: finalTransforms took 43.2563ms
[debug]       Load.apply: config.delegates took 4.3301ms
[debug]       Load.apply: Def.make(settings)... took 319.8579ms
[debug]       Load.apply: structureIndex took 68.291ms
[debug]       Load.apply: mkStreams took 1.2144ms
[info] loading project definition from C:\nsw-project\ETL-License\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4885.9195ms
[debug]     Load.loadUnit: defsScala took 0.002ms
[debug] [Loading] Scanning directory C:\nsw-project\ETL-License
[debug]       Load.loadUnit: mkEval took 0.1835ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.7891 ms
[info] loading settings for project root from build.sbt...
[debug]         Load.resolveProject(root) took 28.635ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\nsw-project\ETL-License, plugins: List(<none>))) took 32.3737ms
[debug] [Loading] Done in C:\nsw-project\ETL-License, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 936.9012ms
[debug]     Load.loadUnit: cleanEvalClasses took 4.8533ms
[debug]   Load.loadUnit(file:/C:/nsw-project/ETL-License/, ...) took 5828.5722ms
[debug] Load.apply: load took 5839.7326ms
[debug] Load.apply: resolveProjects took 0.1976ms
[debug] Load.apply: finalTransforms took 24.3455ms
[debug] Load.apply: config.delegates took 0.4293ms
[debug] Load.apply: Def.make(settings)... took 76.9447ms
[debug] Load.apply: structureIndex took 23.4361ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to ETL-License (in build file:/C:/nsw-project/ETL-License/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(idea-shell, None, None)
